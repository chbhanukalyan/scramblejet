# This contains information about the various data types that we encounter
# while generating the code. 
# Format is as follows
# typename:size:modifiers
# modifiers are normal modifers which do not change the size of the type
char:1
short:2
short int:2
int:4
long int:8
long:8
long long:8
float:4
double:8
long double:10
=========================================================================
# Allowed Modifiers section (For example pointers are not allowed)
unsigned
volatile
=========================================================================
# This indicates that the next section is a server section
# Code section
# %C -> Class Name
# %P -> Object Name
# %T -> Variable Type Name
# %N -> Variable Name
# $S -> Variable Size
STRT:/******AUTOGENERATED CODE START*******/
NORM:/* Serializes the network elements into the given buffer */
NORM:int %C::serialize%P(unsigned char *buf) {
NORM:	int len = 0;
RNRM:	*((%T *)(buf + len)) = %N; len += %S;
RARR:	memcpy(buf + len, %N, %S * %A); len += %S * %A;
NORM:	return len;
NORM:}
NORM:
STOP:/******AUTOGENERATED CODE END*******/
=========================================================================
# This indicates that the next section is a client section
# Code section
# %C -> Class Name
# %P -> Object Name
# %T -> Variable Type Name
# %N -> Variable Name
# $S -> Variable Size
STRT:/******AUTOGENERATED CODE START*******/
NORM:/* Deserializes the network elements into the given buffer */
NORM:int %C::deserialize%P(unsigned char *buf) {
NORM:	int len = 0;
RNRM:	%N = *((%T *)(buf + len)); len += %S;
RARR:	memcpy(%N, buf + len, %S * %A); len += %S * %A;
NORM:	return len;
NORM:}
NORM:
STOP:/******AUTOGENERATED CODE END*******/
=========================================================================

